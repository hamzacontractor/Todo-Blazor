
@using Models

@inject Blazored.LocalStorage.ILocalStorageService localStore

@{
    string cls = "todo-container";
    if (ThisTodo.Done)
        cls = " todo-container-done ";
    <div class="row my-3 p-2 @cls" style="font-size:1.2em;">
        <div class="col-12 px-2 my-1">
            <label class="d-flex" style="cursor:pointer;">
                <input type="checkbox" name="chkDone" @bind="ThisTodo.Done" @onclick="(e => { Toggle(); })" class="my-auto" style="width:1.2em; height:1.2em; cursor:pointer;" />

                @if (ThisTodo.Done)
                {
                    <span class="my-auto ml-2"><s>@ThisTodo.Text</s></span>
                }
                else
                {
                    <span class="my-auto ml-2">@ThisTodo.Text</span>
                }

            </label>

        </div>
        <div class="col-12 px-2 my-1" style="font-size:.65em;">
            @if (ThisTodo.Done)
            {
                <div class="row justify-content-between">
                    <div class="col-auto"><span class="mr-2">Completed On</span>@ThisTodo.TimeCompleted.ToString("dddd, dd MMMM yyyy hh:mm tt") </div>
                    @*<div class="col-auto"><span class="mr-2">Completed In</span>@tat</div>*@
                </div>
            }
            <div class="row">
                <div class="col-auto">
                    <span class="mr-2">Added On</span>@ThisTodo.TimeAdded.ToString("dddd, dd MMMM yyyy hh:mm tt")
                </div>
            </div>
        </div>
        <button type="button" class="btn btn-sm btn-danger position-absolute" style="font-size:.6em; top:.5em; right:.5em;" @onclick="RemoveTodo">&times;</button>
        <button type="button" class="btn btn-sm btn-success position-absolute" style="font-size:.6em; bottom:.5em; right:.5em;" @onclick="StoreTodo">Save</button>
    </div>
}



@code {
    [Parameter] public TodoClass ThisTodo { get; set; } = new TodoClass();

    private async Task RemoveTodo()
    {
        await new Logic(localStore).RemoveTodoFromDisplayed(ThisTodo);
    }

    private async Task StoreTodo()
    {
        Logic logic = new Logic(localStore);
        await logic.SaveTodoToStored(ThisTodo);
        await logic.RemoveTodoFromDisplayed(ThisTodo);
    }

    private void Toggle()
    {
        ThisTodo.TimeCompleted = DateTime.Now
                                         .AddHours(5.5);
        ThisTodo.TimeSpan = DateTime.Now
                                    .AddHours(5.5)
                                    .Subtract(ThisTodo.TimeAdded);
    }


}
