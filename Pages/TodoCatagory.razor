
@using System.Threading
@using Models

@inject ILocalStorageService localStore


@if (Data.Displayed.Count > 0)
{
    foreach (TodoCatagoryModel todoCatagory in Data.Displayed)
    {
        <div class="col-12 p-4 mt-5 priority-container">
            <button type="button" class="btn btn-outline-danger position-absolute border-0" style="top:6px; right:4px;" @onclick="(e => { RemoveCatagory(todoCatagory); Console.WriteLine(e.Type); })">&times;</button>
            <h4>@todoCatagory.Name</h4>
            @if (todoCatagory.Todos.Count > 0)
            {
                foreach (TodoClass thisTodo in todoCatagory.Todos)
                {
                    <div class="col-12">
                        <TodoComponent ThisTodo="@thisTodo" />
                    </div>
                }
            }
            <p>Average Completion Time: @todoCatagory.AverageTimeSpan</p>
        </div>
    }
}

@code{
    protected override Task OnInitializedAsync()
    {

        var timer = new Timer(new TimerCallback(x =>
        {
            this.StateHasChanged();
        }), DateTime.Now, 100, 100);

        return base.OnInitializedAsync();
    }

    async Task RemoveCatagory(TodoCatagoryModel todoCatagory)
    {
        Data.Stored.Remove(todoCatagory);
        await localStore.SetItemAsync("stored", Data.Stored);

        Data.Displayed.Remove(todoCatagory);
        await localStore.SetItemAsync("displayed", Data.Displayed);
    }

}
